#!/usr/bin/env python

import rospy
import time
import random
from gazebo_msgs.msg import ModelState, ModelStates
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Twist

class Combination():
    def __init__(self):
        self.pub_model = rospy.Publisher('gazebo/set_model_state', ModelState, queue_size=1)
        self.moving()

    def moving(self):
        state = 0
        while not rospy.is_shutdown():
            model = rospy.wait_for_message('gazebo/model_states', ModelStates)

            for i in range(len(model.name)):

                if model.name[i] == 'obstacle_1':
                    a=0
                    obstacle_1 = ModelState()
                    obstacle_1.model_name = model.name[i]
                    obstacle_1.pose = model.pose[i]
                    obstacle_1.twist = model.twist[i]

                    if obstacle_1.pose.position.y > 2.2:
                        obstacle_1.twist.linear.y = -0.25
                    elif obstacle_1.pose.position.y < 2.2 and obstacle_1.pose.position.y > -1.2 and obstacle_1.twist.linear.y <0:
                        obstacle_1.twist.linear.y = -0.25
                    elif obstacle_1.pose.position.y < -1.2:
                        obstacle_1.twist.linear.y = 0.25
                    elif obstacle_1.pose.position.y < 2.2 and obstacle_1.pose.position.y > -1.2 and obstacle_1.twist.linear.y >0:
                        obstacle_1.twist.linear.y = 0.25

                        for j in range(len(model.name)):
                            if model.name[j] == 'turtlebot3_burger':
                                a = random.randint(1,2)
                                turtlebot_pos= ModelState()
                                turtlebot_pos.model_name=model.name[j]
                                turtlebot_pos.pose = model.pose[j]
                                print(turtlebot_pos.pose.position.x)
                                print(turtlebot_pos.pose.position.y)
                                if abs(turtlebot_pos.pose.position.y)<0.2  and abs(turtlebot_pos.pose.position.x)<0.2:
                                    if a==1:
                                        obstacle_1.pose.position.x=1.5
                                        obstacle_1.pose.position.y=2.5
                                    elif a==2:
                                        obstacle_1.pose.position.x=2.5
                                        obstacle_1.pose.position.y=2.5
                                    time.sleep(0.1)
        
                    self.pub_model.publish(obstacle_1)

def main():
    rospy.init_node('simulation_5_obstacle_1')
    try:
        combination = Combination()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
