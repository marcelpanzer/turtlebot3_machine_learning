#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import os
import json
import numpy as np
import random
import time
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray

# modified environment - considers both networks and interconnection
from src.turtlebot3_dqn.simulation_hierarchical_environment import Env
from keras.models import Sequential, load_model
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Activation


EPISODES = 3000

class ReinforceAgent():
    def __init__(self, state_size, state_size_2, action_size):
        self.pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
        self.dirPath = os.path.dirname(os.path.realpath(__file__))
        self.dirPath = self.dirPath.replace('turtlebot3_dqn/nodes', 'turtlebot3_dqn/save_model/stage_hierarchical_world_2')
        self.result = Float32MultiArray()

        self.load_model = False
        self.load_episode = 0
        self.state_size = state_size
        self.state_size_2 = state_size_2
        self.action_size = action_size
        self.episode_step = 6000
        self.target_update = 2000
        self.discount_factor = 0.9
        self.learning_rate = 0.001
        self.epsilon = 1.0
        self.epsilon_decay = 0.995
        self.epsilon_min = 0.15
        self.batch_size = 64
        self.train_start = 64
        self.memory = deque(maxlen=1000000)
        self.memory_2 = deque(maxlen=1000000)

        self.model = self.buildModel()
        self.target_model = self.buildModel()
        # second network
        self.model_2 = self.buildModel()
        self.target_model_2 = self.buildModel()

        self.updateTargetModel()

        if self.load_model:
            self.model.set_weights(load_model(self.dirPath + str(self.load_episode) + ".h5").get_weights())

            with open(self.dirPath + str(self.load_episode) + '.json') as outfile:
                param = json.load(outfile)
                self.epsilon = param.get('epsilon')

    def buildModel(self):
        model = Sequential()
        model.add(Dense(64, input_shape=(self.state_size,), activation='relu', kernel_initializer='lecun_uniform'))
        model.add(Dense(64, activation='relu', kernel_initializer='lecun_uniform'))
        model.add(Dense(self.action_size, kernel_initializer='lecun_uniform'))
        model.add(Activation('linear'))
        model.compile(loss='mse', optimizer=RMSprop(lr=self.learning_rate, rho=0.9, epsilon=1e-06))
        model.summary()

        return model

    def getQvalue(self, reward, next_target, done):
        if done:
            return reward
        else:
            return reward + self.discount_factor * np.amax(next_target)

    def updateTargetModel(self):
        # twice
        self.target_model.set_weights(self.model.get_weights())
        self.target_model_2.set_weights(self.model_2.get_weights())

    def getAction(self, state):
        if np.random.rand() <= self.epsilon:
            self.q_value = np.zeros(self.action_size)
            return random.randrange(self.action_size)
        else:
            q_value = self.model.predict(state.reshape(1, len(state)))
            self.q_value = q_value
            return np.argmax(q_value[0])

    def getAction_2(self, state):
        if np.random.rand() <= self.epsilon:
            self.q_value = np.zeros(self.action_size)
            return random.randrange(self.action_size)
        else:
            q_value = self.model_2.predict(state.reshape(1, len(state)))
            self.q_value = q_value
            return np.argmax(q_value[0])
        
    # both memories
    def appendMemory(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def appendMemory_2(self, state, action, reward, next_state, done):
        self.memory_2.append((state, action, reward, next_state, done))

    def trainModel(self, target=False):
        mini_batch = random.sample(self.memory, self.batch_size)
        X_batch = np.empty((0, self.state_size), dtype=np.float64)
        Y_batch = np.empty((0, self.action_size), dtype=np.float64)

        for i in range(self.batch_size):
            states = mini_batch[i][0]
            actions = mini_batch[i][1]
            rewards = mini_batch[i][2]
            next_states = mini_batch[i][3]
            dones = mini_batch[i][4]

            q_value = self.model.predict(states.reshape(1, len(states)))
            self.q_value = q_value

            if target:
                next_target = self.target_model.predict(next_states.reshape(1, len(next_states)))

            else:
                next_target = self.model.predict(next_states.reshape(1, len(next_states)))

            next_q_value = self.getQvalue(rewards, next_target, dones)

            X_batch = np.append(X_batch, np.array([states.copy()]), axis=0)
            Y_sample = q_value.copy()

            Y_sample[0][actions] = next_q_value
            Y_batch = np.append(Y_batch, np.array([Y_sample[0]]), axis=0)

            if dones:
                X_batch = np.append(X_batch, np.array([next_states.copy()]), axis=0)
                Y_batch = np.append(Y_batch, np.array([[rewards] * self.action_size]), axis=0)

        self.model.fit(X_batch, Y_batch, batch_size=self.batch_size, epochs=1, verbose=0)

    def trainModel_2(self, target=False):
        mini_batch = random.sample(self.memory_2, self.batch_size)
        X_batch = np.empty((0, self.state_size), dtype=np.float64)
        Y_batch = np.empty((0, self.action_size), dtype=np.float64)

        for i in range(self.batch_size):
            states = mini_batch[i][0]
            actions = mini_batch[i][1]
            rewards = mini_batch[i][2]
            next_states = mini_batch[i][3]
            dones = mini_batch[i][4]

            q_value = self.model_2.predict(states.reshape(1, len(states)))
            self.q_value = q_value

            if target:
                next_target = self.target_model_2.predict(next_states.reshape(1, len(next_states)))

            else:
                next_target = self.model_2.predict(next_states.reshape(1, len(next_states)))

            next_q_value = self.getQvalue(rewards, next_target, dones)

            X_batch = np.append(X_batch, np.array([states.copy()]), axis=0)
            Y_sample = q_value.copy()

            Y_sample[0][actions] = next_q_value
            Y_batch = np.append(Y_batch, np.array([Y_sample[0]]), axis=0)

            if dones:
                X_batch = np.append(X_batch, np.array([next_states.copy()]), axis=0)
                Y_batch = np.append(Y_batch, np.array([[rewards] * self.action_size]), axis=0)

        self.model_2.fit(X_batch, Y_batch, batch_size=self.batch_size, epochs=1, verbose=0)

if __name__ == '__main__':
    rospy.init_node('turtlebot3_dqn_stage_3')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)
    result = Float32MultiArray()
    get_action = Float32MultiArray()

    state_size = 362
    state_size_2 = 362
    action_size = 11

    env = Env(action_size)

    agent = ReinforceAgent(state_size, state_size_2, action_size)
    scores, scores_2, episodes = [], [], []
    global_step = 0
    start_time = time.time()

    with open('/home/ifl/catkin_ws/src/turtlebot3_machine_learning/turtlebot3_dqn/results_experiments/dqn_hierarchical_world_initial_2_1_bis_.csv', 'w+') as saveFile:

        saveFile.write("Q-value_ Q_value_2,Crashes,Goals,Time" + '\n')

        for e in range(agent.load_episode + 1, EPISODES):
            done = False
            state, state_2 = env.reset()
            score = 0
            score_2 = 0
            for t in range(agent.episode_step):
                action = agent.getAction(state)
                next_state, reward, goals = env.step(action)
                agent.appendMemory(state, action, reward, next_state, done)
                #das erste Modell ist durchgelaufen

                action_2 = agent.getAction_2(state_2)
                next_state_2, reward_2, done, crashes = env.step_2(action_2, action)
                agent.appendMemory_2(state_2, action_2, reward_2, next_state_2, done)

                if len(agent.memory) >= agent.train_start:
                    if global_step <= agent.target_update:
                        agent.trainModel()
                        agent.trainModel_2()
                    else:
                        agent.trainModel(True)
                        agent.trainModel_2(True)

                score += reward
                score_2 += reward_2
                state = next_state
                state_2 = next_state_2
                # get_action.data = [action, score, reward]
                # pub_get_action.publish(get_action)

                # if e % 10 == 0:
                #     agent.model.save(agent.dirPath + str(e) + '.h5')
                #     with open(agent.dirPath + str(e) + '.json', 'w') as outfile:
                #         json.dump(param_dictionary, outfile)

                if t >= 500:
                    rospy.loginfo("Time out!!")
                    done = True

                if done:
                    result.data = [score, np.max(agent.q_value)]
                    pub_result.publish(result)
                    agent.updateTargetModel()
                    scores.append(score)
                    scores_2.append(score_2)
                    episodes.append(e)
                    m, s = divmod(int(time.time() - start_time), 60)
                    h, m = divmod(m, 60)

                    saveFile.write(str(score)+","+str(score_2)+","+str(crashes)+","+str(goals)+","+str(h)+"."+str(m)+"."+str(s) + '\n')  # write each result to new line
                    saveFile.flush()

                    rospy.loginfo('Ep: %d score: %.2f score_2: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                                  e, score, score_2, len(agent.memory), agent.epsilon, h, m, s)
                    param_keys = ['epsilon']
                    param_values = [agent.epsilon]
                    param_dictionary = dict(zip(param_keys, param_values))
                    break

                global_step += 1
                if global_step % agent.target_update == 0:
                    rospy.loginfo("UPDATE TARGET NETWORK")

            if agent.epsilon > agent.epsilon_min:
                agent.epsilon *= agent.epsilon_decay
